#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import ttk


class TimeEntry(ttk.Entry):
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        self.insert(0, "HH:MM")
        self.bind("<FocusIn>", self.on_focus_in)

    def on_focus_in(self, event):
        self.select_range(0, tk.END)

    def get_time_in_minutes(self):
        text = self.get()
        hours, minutes = map(int, text.split(':'))
        return hours * 60 + minutes

    def set_time_from_minutes(self, total_minutes):
        hours = total_minutes // 60
        minutes = total_minutes % 60
        self.delete(0, tk.END)
        self.insert(0, f"{hours:02d}:{minutes:02d}")


class TextBoxRow(tk.Frame):
    def __init__(self, parent, main_window, row_number, update_callback, delete_callback, move_callback):
        super().__init__(parent, bg="#f6f5f4")
        self.main_window = main_window  # Reference to the MainWindow instance
        self.update_callback = update_callback
        self.delete_callback = delete_callback
        self.move_callback = move_callback
        self.grid_columnconfigure(1, weight=1)

        self.row_label = tk.Label(self, text=str(row_number), width=2, bg="#f6f5f4")
        self.row_label.grid(row=0, column=0, padx=5)

        # First checkbox
        self.checkbox_var1 = tk.BooleanVar()
        self.checkbox1 = tk.Checkbutton(
            self,
            variable=self.checkbox_var1,
            bg="#f6f5f4",
            activebackground="#f6f5f4",
            relief="flat",
            highlightthickness=0,
            bd=0
        )
        self.checkbox1.grid(row=0, column=1, padx=5)

        # Second checkbox (disabled)
        self.checkbox_var2 = tk.BooleanVar()
        self.checkbox2 = tk.Checkbutton(
            self,
            variable=self.checkbox_var2,
            bg="#f6f5f4",
            activebackground="#f6f5f4",
            relief="flat",
            highlightthickness=0,
            bd=0,
            state=tk.DISABLED  # Disable the second checkbox
        )
        self.checkbox2.grid(row=0, column=2, padx=5)

        self.time_entry = TimeEntry(self, width=7)
        self.time_entry.grid(row=0, column=3, padx=5)

        self.entry = ttk.Entry(self, width=48)
        self.entry.grid(row=0, column=4, padx=5)
        self.entry.bind("<Return>", self.add_new_row)  # Bind Enter key to add a new row
        self.entry.bind("<Alt-Delete>", lambda e: self.delete_row())
        self.entry.bind("<Alt-Up>", lambda e: self.move_row(-1))
        self.entry.bind("<Alt-Down>", lambda e: self.move_row(1))

        self.duration_spin = ttk.Spinbox(self, from_=1, to=999, increment=5, width=5)
        self.duration_spin.set(10)
        self.duration_spin.grid(row=0, column=5, padx=5)
        self.duration_spin.bind("<Return>", self.add_new_row)  # Bind Enter key to Spinbox

        self.value_label = tk.Label(self, text="?", width=4, bg="#f6f5f4")
        self.value_label.grid(row=0, column=6, padx=5)

    def enforce_first_row_checkbox_rule(self):
        """Ensure the first row's first checkbox is always checked and disabled."""
        if self.main_window.rows[0] == self:
            self.checkbox_var1.set(True)
            self.checkbox1.config(state=tk.DISABLED)
        else:
            self.checkbox1.config(state=tk.NORMAL)

    def add_new_row(self, event=None):
        """
        Adds a new row directly below the current one and moves the cursor to the new row's entry field.
        """
        current_index = self.main_window.rows.index(self)
        new_row = self.update_callback(current_index + 1)
        if new_row:  # Ensure a new row was added
            new_row.entry.focus_set()  # Move the cursor to the new row's entry field

    def delete_row(self):
        self.delete_callback(self)

    def move_row(self, direction):
        self.move_callback(self, direction)

    def swap_contents_with(self, other_row):
        """Swap the contents of this row with another row."""
        # Swap first checkbox state
        self_checkbox1_state = self.checkbox_var1.get()
        other_checkbox1_state = other_row.checkbox_var1.get()
        self.checkbox_var1.set(other_checkbox1_state)
        other_row.checkbox_var1.set(self_checkbox1_state)

        # Swap second checkbox state
        self_checkbox2_state = self.checkbox_var2.get()
        other_checkbox2_state = other_row.checkbox_var2.get()
        self.checkbox_var2.set(other_checkbox2_state)
        other_row.checkbox_var2.set(self_checkbox2_state)

        # Swap time entry
        self_time = self.time_entry.get()
        other_time = other_row.time_entry.get()
        self.time_entry.delete(0, tk.END)
        self.time_entry.insert(0, other_time)
        other_row.time_entry.delete(0, tk.END)
        other_row.time_entry.insert(0, self_time)

        # Swap entry text
        self_text = self.entry.get()
        other_text = other_row.entry.get()
        self.entry.delete(0, tk.END)
        self.entry.insert(0, other_text)
        other_row.entry.delete(0, tk.END)
        other_row.entry.insert(0, self_text)

        # Swap spinbox value
        self_duration = self.duration_spin.get()
        other_duration = other_row.duration_spin.get()
        self.duration_spin.delete(0, tk.END)
        self.duration_spin.insert(0, other_duration)
        other_row.duration_spin.delete(0, tk.END)
        other_row.duration_spin.insert(0, self_duration)


class MainWindow(tk.Tk):
    CONFIG_DIR = os.path.expanduser("~/.config/plin/")
    CONFIG_FILE = os.path.join(CONFIG_DIR, "day-end.txt")

    def __init__(self):
        super().__init__()
        self.title("Plin")
        self.geometry("720x445")
        self.resizable(False, False)
        self.configure(bg="#f6f5f4")

        # Create configuration directory
        os.makedirs(self.CONFIG_DIR, exist_ok=True)

        # Top frame with update button and time entry
        top_frame = tk.Frame(self, bg="#f6f5f4")
        top_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        # Update button with custom background and border color
        update_button = tk.Button(
            top_frame,
            text="Update",
            bg="#f8f7f7",
            activebackground="#f8f7f7",
            relief="flat",
            highlightbackground="#cdc7c2",  # Border color
            highlightthickness=1,  # Border thickness
        )
        update_button.config(command=self.on_update_clicked)
        update_button.pack(side=tk.LEFT)

        self.time_entry_top_right = TimeEntry(top_frame, width=6)
        self.time_entry_top_right.pack(side=tk.RIGHT)
        self.load_time_from_config()

        # Scrollable frame for rows
        self.rows_frame = tk.Frame(self, bg="#f6f5f4")
        self.rows_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=10, pady=5)

        self.canvas = tk.Canvas(self.rows_frame, bg="#f6f5f4")
        self.scrollbar = ttk.Scrollbar(self.rows_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg="#f6f5f4")

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        # Bind mouse wheel scrolling for Windows, macOS, and Linux
        self.canvas.bind_all("<MouseWheel>", self.on_mouse_wheel)  # Windows and macOS
        self.canvas.bind_all("<Button-4>", self.on_mouse_wheel)    # Linux (scroll up)
        self.canvas.bind_all("<Button-5>", self.on_mouse_wheel)    # Linux (scroll down)

        # Add initial row
        self.rows = []
        self.add_row(1)

        # Set initial time in the first row
        current_time = datetime.now()
        ten_minutes_later = current_time + timedelta(minutes=10)
        formatted_time = ten_minutes_later.strftime("%H:%M")
        self.rows[0].time_entry.set_time_from_minutes(self.time_to_minutes(formatted_time))

        # Save time on window close
        self.protocol("WM_DELETE_WINDOW", self.on_close_request)

    def add_row(self, index=None):
        """
        Adds a new row to the rows list at the specified index or at the end if no index is provided.
        """
        if index is None:
            index = len(self.rows)
        row_number = index + 1
        
        # Create a new row
        row = TextBoxRow(self.scrollable_frame, self, row_number, self.add_row, self.delete_row, self.move_row)
        
        # Insert the row visually in the correct position
        if index < len(self.rows):
            # Pack the new row before the row at the specified index
            row.pack(fill=tk.X, pady=2, before=self.rows[index])
        else:
            # Pack the new row at the end
            row.pack(fill=tk.X, pady=2)
        
        # Insert the row into the rows list
        self.rows.insert(index, row)

        # Update the row numbers
        self.update_row_numbers()
        return row  # Return the newly created row

    def delete_row(self, row):
        if len(self.rows) > 1:
            self.rows.remove(row)
            row.destroy()
            self.update_row_numbers()

    def move_row(self, row, direction):
        index = self.rows.index(row)
        new_index = index + direction
        if 0 <= new_index < len(self.rows):
            self.rows[index].swap_contents_with(self.rows[new_index])
            # After swapping, set focus to the moved row's entry widget
            self.rows[new_index].entry.focus_set()
        self.update_row_numbers()

    def update_row_numbers(self):
        for i, row in enumerate(self.rows):
            row.row_label.config(text=str(i + 1))
            row.pack(fill=tk.X, pady=2)
        # Always enforce the first row checkbox rule
        for row in self.rows:
            row.enforce_first_row_checkbox_rule()

    def time_to_minutes(self, time_str):
        hours, minutes = map(int, time_str.split(":"))
        return hours * 60 + minutes

    def on_close_request(self):
        self.save_time_to_config()
        self.destroy()

    def save_time_to_config(self):
        time_value = self.time_entry_top_right.get()
        with open(self.CONFIG_FILE, "w") as config_file:
            config_file.write(time_value)

    def load_time_from_config(self):
        if os.path.exists(self.CONFIG_FILE):
            with open(self.CONFIG_FILE, "r") as config_file:
                self.time_entry_top_right.delete(0, tk.END)
                self.time_entry_top_right.insert(0, config_file.readline().strip())

    def on_mouse_wheel(self, event):
        """
        Handles touchpad/mouse wheel scrolling and restricts scrolling
        beyond the top and bottom of the rows.
        """
        # Get the current scroll position of the canvas
        current_scroll = self.canvas.yview()

        # Detect the scroll direction
        if event.num == 4 or event.delta > 0:  # Scroll up
            if current_scroll[0] > 0:  # Prevent scrolling above the top
                self.canvas.yview_scroll(-1, "units")
        elif event.num == 5 or event.delta < 0:  # Scroll down
            if current_scroll[1] < 1:  # Prevent scrolling below the bottom
                self.canvas.yview_scroll(1, "units")

    def on_update_clicked(self):
        """
        Updates intermediate rows based on time differences between checked rows.
        Calculates proportional values and updates labels/timestamps accordingly.
        """
        # Gather all rows with the first checkbox checked
        checked_rows = []
        for row in self.rows:  # Iterate through all rows
            if row.checkbox_var1.get():  # Check if the first checkbox is active
                checked_rows.append(row)

        # Add the top-right time entry as the "end point" if no following checked rows exist
        is_last_checked_row = False

        # Process each pair of consecutive checked rows or the last checked row with the top-right time entry
        for i in range(len(checked_rows)):
            start_row = checked_rows[i]
            if i + 1 < len(checked_rows):
                # If there is a next checked row, use it as the end row
                end_row = checked_rows[i + 1]
            else:
                # This is the last checked row, use the top-right time entry as the end
                is_last_checked_row = True
                end_row = None

            # Calculate value_a (time difference in minutes)
            time_start = start_row.time_entry.get_time_in_minutes()
            if end_row:
                time_end = end_row.time_entry.get_time_in_minutes()
            else:
                time_end = self.time_entry_top_right.get_time_in_minutes()
            value_a = abs(time_end - time_start)

            # Calculate value_b (total duration of intermediate rows)
            value_b = 0
            intermediate_rows = []
            start_index = self.rows.index(start_row)
            end_index = self.rows.index(end_row) if end_row else len(self.rows)

            # Collect intermediate rows and their total durations
            for j in range(start_index, end_index):
                intermediate_rows.append(self.rows[j])
                value_b += int(self.rows[j].duration_spin.get())  # Convert to int

            # Skip if value_b is zero to prevent division errors
            if value_b == 0:
                continue

            # Update the labels and times for intermediate rows
            prev_time = time_start
            prev_calculated_value = 0  # To store the calculated value of the previous row
            
            total_removed = 0
            
            for row in intermediate_rows:  # Include the last intermediate row
                duration = int(row.duration_spin.get())  # Convert to int
                calculated_value = (value_a / value_b) * duration
                floored_value = int(calculated_value)  # Floor the value
                total_removed += calculated_value - floored_value  # Accumulate the removed fraction
                row.value_label.config(text=f"{floored_value}")
                
            # Redistribute the total removed amount
            total_removed = round(total_removed)  # Round the total removed to the nearest integer
            while total_removed >= 1:
                for row in intermediate_rows:
                    row.value_label.config(text=str(int(row.value_label.cget("text")) + 1))
                    total_removed -= 1
                    if total_removed < 1:
                        break
            
            # Update row times
            for row in intermediate_rows:
                # Update the time entry for the row using the previous row's calculated value
                new_time = prev_time + prev_calculated_value
                row.time_entry.set_time_from_minutes(new_time)

                # Update for the next row
                prev_time = new_time
                prev_calculated_value = int(row.value_label.cget("text"))

if __name__ == "__main__":
    app = MainWindow()
    app.mainloop()
